<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Booking">

<resultMap type="HashMap" id="product"> 
	<result column="title" property="title"/> 
	<result column="writer" property="writer"/> 
	<result column="price" property="price"/> 
	<result column="booker" property="booker"/> 
	<result column="parentseq" property="parentseq"/>
	<result column="sysname" property="sysName"/>
</resultMap>


<resultMap type="HashMap" id="booking1"> 
	<result column="title" property="title"/> 
	<result column="writer" property="writer"/> 
	<result column="price" property="price"/> 
	<result column="booker" property="booker"/> 
	<result column="parentseq" property="parentseq"/>
	<result column="approval" property="approval"/>
	<result column="sysname" property="sysName"/>
</resultMap>


<resultMap type="HashMap" id="booking2"> 
	<result column="title" property="title"/> 
	<result column="writer" property="writer"/> 
	<result column="price" property="price"/> 
	<result column="booker" property="booker"/> 
	<result column="parentseq" property="parentseq"/>
	<result column="approval" property="approval"/>	
	<result column="paymentable" property="paymentable"/>
	<result column="sysname" property="sysName"/>
</resultMap>


<!-- 판매자에게 들어온 예약 요청 목록 출력(물품) -->
<select id="requestRentalProduct" resultMap="product" resultType="HashMap">
	select distinct lb.writer,booking.booker,lb.price,lb.title,booking.parentseq,lf.sysname
	from lendboard lb left join (select SYSNAME, PARENTSEQ, REGDATE from (
	select ROW_NUMBER() over (PARTITION BY lendfiles.PARENTSEQ order by lendfiles.REGDATE asc ) AS RNUM, lendfiles.* from lendfiles ) TB where RNUM=1 ) 
	lf on lb.SEQ=lf.PARENTSEQ join booking on(lb.seq = booking.parentseq)
	where booking.bookable=#{y} and booking.seller=#{id} and booking.boardtype=#{able} order by 1 desc
</select>

<!-- 판매자에게 들어온 예약 요청 취소(물품) -->
<delete id="dealFailProduct">
	delete from booking where seller=#{sessionID} and parentseq=${parent} and boardtype=#{able}
</delete>

<!-- 판매자에게 들어온 예약 요청 목록 출력(재능) -->
<select id="requestRentalTalent" resultMap="product" resultType="HashMap">
	select distinct selltalent.writer,booking.booker,selltalent.price,selltalent.title,booking.parentseq
	from selltalent join booking on (selltalent.seq = booking.parentseq) 
	where booking.bookable=#{y} and booking.seller=#{id} and booking.boardtype=#{able}
</select>

<!-- 판매자에게 들어온 예약 요청 취소(재능) -->
<delete id="dealFailTalent">
	delete from booking where seller=#{sessionID} and parentseq=${parent} and boardtype=#{able}
</delete>


<!-- 구매자가 대여 예약 내역 출력 (승인 대기중)-->
<select id="buyRequestProduct" resultMap="booking1" resultType="HashMap">
	select distinct lb.writer,booking.booker,lb.price,lb.title,booking.parentseq,lf.sysname
	from lendboard lb left join (select SYSNAME, PARENTSEQ, REGDATE from (
	select ROW_NUMBER() over (PARTITION BY lendfiles.PARENTSEQ order by lendfiles.REGDATE asc ) AS RNUM, lendfiles.* from lendfiles ) TB where RNUM=1 ) 
	lf on lb.SEQ=lf.PARENTSEQ 
	join booking on (lb.seq = booking.parentseq) 
	where booking.bookable=#{y} and booking.booker=#{id} and booking.boardtype=#{product} order by 1 desc
</select>

<!-- 구매자가 대여 예약 내역 출력 (결제하기 버튼 생성)-->
<select id="buyRequestProduct2" resultMap="booking1" resultType="HashMap">
	select distinct lb.writer,booking.booker,lb.price,lb.title,booking.parentseq,approval.approval,lf.sysname
	from lendboard lb left join (select SYSNAME, PARENTSEQ, REGDATE from (
	select ROW_NUMBER() over (PARTITION BY lendfiles.PARENTSEQ order by lendfiles.REGDATE asc ) AS RNUM, lendfiles.* from lendfiles ) TB where RNUM=1 ) 
	lf on lb.SEQ=lf.PARENTSEQ 
	join booking on (lb.seq = booking.parentseq) join approval on (approval.parentseq =booking.parentseq)
	where booking.bookable=#{y} and booking.booker=#{id} and booking.boardtype=#{product} order by 1 desc
</select>

<!-- 구매자가 대여 예약 내역 출력 (결제완료 버튼 생성)-->
<select id="paymentcomplete" resultMap="booking2" resultType="HashMap">
 select distinct lendboard.writer,booking.booker,lendboard.price,lendboard.title,booking.parentseq,approval.approval,payment.paymentable
	from lendboard join booking on (lendboard.seq = booking.parentseq) join approval on (approval.parentseq =booking.parentseq) join payment on(payment.parentseq = booking.parentseq)
	where payment.paymentable=#{y} and booking.bookable=#{y} and payment.buyer=#{id} and payment.boardtype=#{product} order by 1 desc
</select>


<!-- 구매자가 예약내역 취소 -->
<delete id="bookingFail">
	delete from booking where booker=#{sessionID} and parentseq=${parent}
</delete>

<!--거래 완료 후 예약내역 삭제 -->
<delete id="bookingDelete">
delete from booking where booker=#{id} and parentseq=#{parentseq}
</delete>
<!-- 예약하기 -->
<insert id="booking">
insert into booking values(booking_seq.nextval,#{seller},#{booker},#{bookable},#{parentseq},sysdate,#{boardtype})
</insert>
<!--해당 게시글과 예약자가 한 예약 체크 -->
<select id="checkBooking" resultType="int">
select count(*) from booking where booker=#{booker}and parentseq=#{parentseq}
</select>

</mapper>